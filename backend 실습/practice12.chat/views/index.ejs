<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <script src="https://cdn.socket.io/4.5.0/socket.io.min.js" integrity="sha384-7EyYLQZgWBi67fBtVxw60/OWl1kjsfrPFcaU0pp0nAh+i8FD068QogUvg85Ewy1k" crossorigin="anonymous"></script>
  <script src="https://code.jquery.com/jquery-3.6.1.min.js" integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.bundle.min.js
  "></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css
  ">

  <style>
    * {
      font-family: 'establishRoomNo703OTF';
    }

    @font-face {
      font-family: 'establishRoomNo703OTF';
      src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2112@1.0/establishRoomNo703OTF.woff') format('woff');
      font-weight: normal;
      font-style: normal;
    }

    .modal-body {
      background-color: rgba(147, 170, 212);
    }

    .modal-content {
      width: 400px;
    }

    #chatForm {
      width: 100%;
      min-height: 500px;
    }

    #chatContent {
      width: 100%;
    }

    .myMsg {
      background-color: rgba(148, 223, 132);
      padding: 5px;
      border-radius: 5px;
      margin-right: 5px;
    }

    .otherMsg {
      background-color: white;
      padding: 5px;
      margin-left: 5px;
      border-radius: 5px;
    }

    .DMMsg {
      background-color: plum;
      padding: 5px;
      margin-left: 5px;
      border-radius: 5px;
    }

    .enterMsg {
      text-align: center;
    }

    .myMsgForm {
      text-align: right;
      margin-top: 10px;
    }

    .otherMsgForm {
      text-align: left;
      margin-top: 10px;
    }

    #articleBottom {
      display: flex;
      justify-content: left;
    }

    .main {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 1000px;
    }

    .background {
      width: 500px;
      height: 500px;
      text-align: center;
      background-image: url("/static/img/chat.png");
      background-size: contain;
      background-repeat: no-repeat;
    }

    .loginWrap {
      display: flex;
      flex-direction: column;
      justify-content: center;
      height: 100%;
    }

    .modal-header {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .loginTitle {}

    .loginMain {}
  </style>
</head>

<body>

  <!-- modal -->

  <!-- Button trigger modal -->
  <div class="main">
    <div class="background">
      <div class="loginWrap">
        <div class="loginTitle">
          <h1>즐거움이 가득한 코딩톡</h1>
        </div>
        <div class="loginMain">
          <input id="userID" type="text" placeholder="이름을 입력하세요">
          <button id="loginBtn" type="button" class="btn btn-primary" onclick="login_try();">
            로그인
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal -->
  <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
      <div class="modal-content border border-dark border-5 rounded-5">

        <!-- header -->
        <div class="modal-header">
          <div id="articleTop">
            <nav class="navbar bg-light">
              <div class="container-fluid">
                <a class="navbar-brand" href="#">코딩톡</a>
                <div class="chatCnt"></div>
                <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasNavbar" aria-controls="offcanvasNavbar">
                  <span class="navbar-toggler-icon"></span>
                </button>
                <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasNavbar" aria-labelledby="offcanvasNavbarLabel">
                  <div class="offcanvas-header">
                    <h5 class="offcanvas-title" id="offcanvasNavbarLabel">채팅방서랍</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                  </div>
                  <div class="offcanvas-body">
                    <ul id="chatUser" class="navbar-nav justify-content-end flex-grow-1 pe-3">


                    </ul>
                    <form class="d-flex" role="search">
                      <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                      <button class="btn btn-outline-success" type="submit">Search</button>
                    </form>
                  </div>
                </div>
              </div>
            </nav>

          </div>
        </div>

        <!-- body -->
        <div class="modal-body">
          <div id="chatForm">
            <div id="chatContent">
            </div>
          </div>
        </div>

        <!-- footer -->
        <div class="modal-footer">
          <div id="articleBottom">
            <div class="row g-3">
              <div class="col-sm-3">
                <select class="form-select" name="DM" id="DMList" aria-label="Default select example">
                </select>
              </div>
              <div class="col-sm-6">
                <input type="text" class="form-control" id="myChat" placeholder="메시지를 입력하세요">
              </div>
              <div class="col-sm-3">
                <button id="submitBtn" type="button" class="btn btn-outline-primary" onclick="typeChat();">전송</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- 스크립트 -->
  <script>
    var socket = io.connect();
    var myChat = "";
    var userName = "";
    var userList = {};
    var user_cnt = 0;
    var loggedin = false;
    const myModal = new bootstrap.Modal('#chatModal');

    function updateUser(data) {
      DMuser = Object.keys(data);
      $("#DMList").empty();
      $("#DMList").html(`<option value ="전체">전체</option>`);
      console.log(DMuser);
      for (var i = 0; i < DMuser.length; i++) {
        if (DMuser[i] == userName) {
          continue;
        } else {
          $("#DMList").append(`<option value = ${DMuser[i]}> ${DMuser[i]} </option>`);
        }
      }
    }

    socket.on('msg', function(data) {
      var msg = document.createElement("span");
      var form = document.createElement("div");

      if (data.msg == myChat && data.name == userName) {
        msg.className = 'myMsg';
        form.className = 'myMsgForm';
      } else {
        msg.className = 'otherMsg';
        form.className = 'otherMsgForm';
      }
      msg.append(`${data.name} : ${data.msg}`);
      form.append(msg);
      $("#chatContent").append(form);
    });

    socket.on('DM', function(data) {
      var msg = document.createElement("span");
      var form = document.createElement("div");

      if (data.msg == myChat && data.name == userName) {
        msg.className = 'DMMsg';
        form.className = 'myMsgForm';
        msg.append(`To. ${data.targetName} : ${data.msg}`);
      } else {
        msg.className = 'DMMsg';
        form.className = 'otherMsgForm';
        msg.append(`From. ${data.name} : ${data.msg}`);
      }
      form.append(msg);
      $("#chatContent").append(form);
    });

    socket.on('enter', function(data) {
      if (data.name != undefined) {
        var enter = document.createElement("div");
        enter.append(data.name + `님이 입장하셨습니다.`);
        enter.className = 'enterMsg';
        $("#chatContent").append(enter);
        userList = data.user;
        user_cnt = Object.keys(userList).length;
        updateUser(userList);
        $(".chatCnt").html(`사용자수(${user_cnt})`);

        setUserList(userList);
      }
    })

    socket.on('exit', function(data) {
      if (data.name != undefined) {
        var exit = document.createElement("div");
        exit.append(data.msg);
        exit.className = 'enterMsg';
        if (data.server == 'SERVER') {
          $("#chatContent").append(exit);
          userList = data.user;
          user_cnt = Object.keys(userList).length;
          $(".chatCnt").html(`사용자수(${user_cnt})`);
          updateUser(userList);
          setUserList(userList);
        }
      }
    })

    function typeChat() {
      myChat = $("#myChat").val();
      if (myChat == "") {
        return
      }
      targetName = $("#DMList option:selected").val();
      data = {
        name: userName,
        targetName: targetName,
        msg: myChat
      }
      if (targetName == "전체") {
        socket.emit('msg', data);
      } else {
        socket.emit('DM', data);
      }

      $("#myChat").val('');
    }

    $("#myChat").on("keyup", function() {
      if (window.event.keyCode == 13) {
        typeChat();
      }
    });

    function login_try() {
      userName = $('#userID').val();
      socket.emit('enter', userName);
    }

    $("#userID").on("keyup", function() {
      if (window.event.keyCode == 13) {
        login_try();
      }
    });

    socket.on('check_id', function(data) {
      if (loggedin == true) {
        myModal.show();
      } else if (data == false) {
        alert("이미 존재하는 닉네임입니다.");
      } else {
        document.getElementById('userID').disabled = true;
        myModal.show();
        loggedin = true;
      }
    })

    function setUserList(data) {
      // 대화 유저 추가
      userList = Object.keys(data);
      $("#chatUser").empty();
      $("#chatUser").html(`<li class="nav-item">
                        <a class="nav-link" href="#">대화상대</a>
                      </li>`)
      for (var i = 0; i < userList.length; i++) {
        var $new_user = $(`<li><div>${userList[i]}</div></li>`);
        $("#chatUser").append($new_user);
      }
    }
  </script>
</body>

</html>